apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gateway-app 
  template:
    metadata:
      labels:
        app: gateway-app
    spec:
      containers:
      - name: gateway-container
        # image: anokhadocker/gateway:latest
        image: gateway:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 60m
          requests:
            cpu: 20m
---
kind: Service
apiVersion: v1
metadata:
  name: gateway-service
spec:
  type: NodePort
  selector:
    app: gateway-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
    nodePort: 30080

---
# See case #23
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: fleetman-driver-monitoring
spec:
  hosts:
  - 2oujlno5e4.execute-api.us-east-1.amazonaws.com
  location: MESH_EXTERNAL
  ports:
  - number: 80
    name: http-port
    protocol: HTTP
  - number: 443
    name: https-port-for-tls-origination
    protocol: HTTPS
  resolution: DNS
---
# See case #23 - this is a legacy service that we're integrating with
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: fleetman-driver-monitoring
spec:
  hosts:
  - 2oujlno5e4.execute-api.us-east-1.amazonaws.com
  http:
  - match:
    - port: 80
    route:
    - destination:
        host: 2oujlno5e4.execute-api.us-east-1.amazonaws.com
        port:
          number: 443
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: fleetman-driver-monitoring
spec:
  host: 2oujlno5e4.execute-api.us-east-1.amazonaws.com
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    portLevelSettings:
    - port:
        number: 443
      tls:
        mode: SIMPLE
